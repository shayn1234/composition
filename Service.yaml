tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-examples/cloudify-proxy-plugin/master/plugin.yaml

inputs:
  image_id:
    default:
    type: string

  flavor_id:
    default:
    type: string

  application_blueprint_id:
      default: application
      type: string
      description: Application blueprint ID

node_templates:

# Reference LB and Application Networks
  lb_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_attribute: [ app_proxy_deployment, lb_network_id ] }
      use_external_resource : true
    relationships:
      - target: app_proxy_deployment
        type: cloudify.relationships.depends_on

  app_network:
      type: cloudify.openstack.nodes.Network
      properties:
        resource_id: { get_attribute: [ app_proxy_deployment, app_network_id ] }
        use_external_resource : true
      relationships:
            - target: app_proxy_deployment
              type: cloudify.relationships.depends_on

# Create an Application VM

  firewall_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
    relationships:
      - target: lb_network
        type: cloudify.openstack.server_connected_to
      - target: app_network
            type: cloudify.openstack.server_connected_to
      - target: app_proxy_deployment
        type: cloudify.relationships.depends_on

# Chain APP blueprint
  app_deployment:
      type: cloudify.nodes.BlueprintDeployment
      properties:
        blueprint_id: { get_input: application_blueprint_id }

  app_proxy_deployment:
    type: cloudify.nodes.DeploymentProxy
    properties:
        inherit_outputs:
            - 'lb_network_id'
            - 'application_network_id'
    cloudify.interfaces.lifecycle:
      create:
        inputs:
          deployment_id: { get_attribute: [ app_deployment, deployment_id ]}
      start:
        inputs:
          deployment_id: { get_attribute: [ app_deployment, deployment_id ]}
       stop:
        inputs:
          deployment_id: { get_attribute: [ app_deployment, deployment_id ]}
    relationships:
         - target: app_deployment
           type: cloudify.relationships.depends_on



